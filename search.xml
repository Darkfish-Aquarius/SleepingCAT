<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[来源于十八哥的 MySQL复习]]></title>
    <url>%2FSleepingCAT%2F2020%2F05%2F05%2FMySQL%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[一 复习前的准备1:确认你已安装wamp2:确认你已安装ecshop,并且ecshop的数据库名为shop 二 基础知识1.数据库的连接mysql -u -p -h-u 用户名-p 密码-h host主机 2.库级知识2.1 显示数据库: show databases;2.2 选择数据库: use dbname;2.3 创建数据库: create database dbname charset utf8;2.3 删除数据库: drop database dbname; 3.表级操作3.1 显示库下面的表show tables; 3.2 查看表的结构desc tableName; 3.3 查看表的创建过程show create table tableName; 3.4 创建表create table tbName (列名称1 列类型 [列参数] [not null default ],....列2.......列名称N 列类型 [列参数] [not null default ])engine myisam/innodb charset utf8/gbk 3.4的例子: create table user ( id int auto_increment, name varchar(20) not null default &apos;&apos;, age tinyint unsigned not null default 0, index id (id) )engine=innodb charset=utf8; 注:innodb是表引擎,也可以是myisam或其他,但最常用的是myisam和innodb,charset 常用的有utf8,gbk; 3.5 修改表3.5.1 修改表之增加列 alter table tbName add 列名称１ 列类型 [列参数] [not null default ] #(add之后的旧列名之后的语法和创建表时的列声明一样) 3.5.2 修改表之修改列 alter table tbName change 旧列名 新列名 列类型 [列参数] [not null default ] #(注:旧列名之后的语法和创建表时的列声明一样) 3.5.3 修改表之减少列 alter table tbName drop 列名称; 3.5.4 修改表之增加主键 alter table tbName add primary key(主键所在列名); 例:alter table goods add primary key(id)该例是把主键建立在id列上 3.5.5 修改表之删除主键 alter table tbName drop primary key; 3.5.6 修改表之增加索引 alter table tbName add [unique|fulltext] index 索引名(列名); 3.5.7 修改表之删除索引 alter table tbName drop index 索引名; 3.5.8 清空表的数据 truncate tableName; 4.列类型讲解列类型: 4.1整型tinyint (0255/-128127)，smallint (065535/-3276832767)，mediumint int bigint (参考手册11.2) 参数解释:unsigned 无符号(不能为负)，zerofill 0填充，M 填充后的宽度举例:tinyint unsigned;tinyint(6) zerofill; 4.2数值型​ 浮点型:float double 格式:float(M,D) unsigned\zerofill; 字符型 char(m) 定长 varchar(m)变长 text 列 实存字符i 实占空间 利用率 char(M) 0&lt;=i&lt;=M M i/m&lt;=100% varchar(M) 0&lt;=i&lt;=M i+1,2 i/i+1/2&lt;100% 4.3日期时间类型 year YYYY 范围:1901~2155. 可输入值2位和4位(如98,2012) date YYYY-MM-DD 如:2010-03-14 time HH:MM:SS 如:19:26:32 datetime YYYY-MM-DD HH:MM:SS 如:2010-03-14 19:26:32 timestamp YYYY-MM-DD HH:MM:SS 特性:不用赋值,该列会为自己赋当前的具体时间 5.增删改查基本操作5.1 插入数据insert into 表名(col1,col2,……) values(val1,val2……); -- 插入指定列insert into 表名 values (,,,,); -- 插入所有列insert into 表名 values -- 一次插入多行 (val1,val2……),(val1,val2……),(val1,val2……); 5.2修改数据update tablename set col1=newval1, col2=newval2,......colN=newvalNwhere 条件; 5.3 删除数据delete from tablename where 条件; 5.4 select查询（1）条件查询 wherea. 条件表达式的意义，表达式为真，则该行取出b. 比较运算符 = ，!=，&lt; &gt; &lt;= &gt;=c. like , not like (‘%’匹配任意多个字符,’_’匹配任意单个字符) ​ in , not in , between andd. is null , is not null （2）分组 group by​ 一般要配合5个聚合函数使用:max,min,sum,avg,count （3）筛选 having（4）排序 order by（5）限制 limit6.连接查询6.1 左连接 .. left join .. on​ table A left join table B on tableA.col1 = tableB.col2 ; 例句: select 列名 from table A left join table B on tableA.col1 = tableB.col2 6.2 右链接 right join6.3 内连接 inner join左右连接都是以在左边的表的数据为准,沿着左表查右表.内连接是以两张表都有的共同部分数据为准,也就是左右连接的数据之交集. 7.子查询7.1 where 型子查询内层sql的返回值在where后作为条件表达式的一部分 例句: select * from tableA where colA = (select colB from tableB where …); 7.2 from 型子查询内层sql查询结果,作为一张表,供外层的sql语句再次查询 例句:select * from (select * from …) as tableName where …. 8.字符集 客服端sql编码character_set_client 服务器转化后的sql编码character_set_connection 服务器返回给客户端的结果集编码character_set_results 快速把以上3个变量设为相同值set names 字符集 存储引擎 engine=1\2 1 Myisam 速度快 不支持事务 回滚 2 Innodb 速度慢 支持事务,回滚 ①开启事务start transaction ②运行sql; ③提交,同时生效\回滚commit\rollback 触发器 trigger 监视地点:表 监视行为:增 删 改 触发时间:after\before 触发事件:增 删 改 创建触发器语法 create trigger tgName after/before insert/delete/update on tableName for each row sql; -- 触发语句 删除触发器:drop trigger tgName; 9.索引 提高查询速度,但是降低了增删改的速度,所以使用索引时,要综合考虑. 索引不是越多越好,一般我们在常出现于条件表达式中的列加索引. 值越分散的列，索引的效果越好 索引类型 primary key主键索引 index 普通索引 unique index 唯一性索引 fulltext index 全文索引 10.综合练习连接上数据库服务器创建一个gbk编码的数据库建立商品表和栏目表,字段如下: 商品表:goodsgoods_id –主键,goods_name – 商品名称cat_id – 栏目idbrand_id – 品牌idgoods_sn – 货号goods_number – 库存量shop_price – 价格goods_desc –商品详细描述 栏目表:categorycat_id –主键cat_name – 栏目名称parent_id – 栏目的父id 建表完成后,作以下操作:删除goods表的goods_desc 字段,及货号字段并增加字段:click_count – 点击量 在goods_name列上加唯一性索引在shop_price列上加普通索引在clcik_count列上加普通索引删除click_count列上的索引 对goods表插入以下数据: 三 查询知识注:以下查询基于ecshop网站的商品表(ecs_goods)在练习时可以只取部分列,方便查看. 1.基础查询 where的练习查出满足以下条件的商品 1.1 主键为32的商品select goods_id,goods_name,shop_price from ecs_goods where goods_id=32; 1.2 不属第3栏目的所有商品select goods_id,cat_id,goods_name,shop_price from ecs_goods where cat_id!=3; 1.3 本店价格高于3000元的商品select goods_id,cat_id,goods_name,shop_price from ecs_goods where shop_price &gt;3000; 1.4 本店价格低于或等于100元的商品select goods_id,cat_id,goods_name,shop_price from ecs_goods where shop_price &lt;=100; 1.5 取出第4栏目或第11栏目的商品(不许用or)select goods_id,cat_id,goods_name,shop_price from ecs_goods where cat_id in (4,11); 1.6 取出100&lt;=价格&lt;=500的商品(不许用and)select goods_id,cat_id,goods_name,shop_price from ecs_goods where shop_price between 100 and 500; 1.7 取出不属于第3栏目且不属于第11栏目的商品(and,或not in分别实现)select goods_id,cat_id,goods_name,shop_price from ecs_goods where cat_id!=3 and cat_id!=11; select goods_id,cat_id,goods_name,shop_price from ecs_goods where cat_id not in (3,11); 1.8 取出价格大于100且小于300,或者大于4000且小于5000的商品()select goods_id,cat_id,goods_name,shop_price from ecs_goods where shop_price&gt;100 and shop_price &lt;300 or shop_price &gt;4000 and shop_price &lt;5000; 1.9 取出第3个栏目下面价格&lt;1000或&gt;3000,并且点击量&gt;5的系列商品select goods_id,cat_id,goods_name,shop_price,click_count from ecs_goods where cat_id=3 and (shop_price &lt;1000 or shop_price&gt;3000) and click_count&gt;5; 1.10 取出第1个栏目下面的商品(注意:1栏目下面没商品,但其子栏目下有)select goods_id,cat_id,goods_name,shop_price,click_count from ecs_goods where cat_id in (2,3,4,5); 1.11 取出名字以”诺基亚”开头的商品select goods_id,cat_id,goods_name,shop_price from ecs_goods where goods_name like &apos;诺基亚%&apos;; 1.12 取出名字为”诺基亚Nxx”的手机select goods_id,cat_id,goods_name,shop_price from ecs_goods where goods_name like &apos;诺基亚N__&apos;; 1.13 取出名字不以”诺基亚”开头的商品select goods_id,cat_id,goods_name,shop_price from ecs_goos where goods_name not like &apos;诺基亚%&apos;; 1.14 取出第3个栏目下面价格在1000到3000之间,并且点击量&gt;5 “诺基亚”开头的系列商品select goods_id,cat_id,goods_name,shop_price from ecs_goods where cat_id=3 and shop_price&gt;1000 and shop_price &lt;3000 and click_count&gt;5 and goods_name like &apos;诺基亚%&apos;; select goods_id,cat_id,goods_name,shop_price from ecs_goods where shop_price between 1000 and 3000 and cat_id=3 and click_count&gt;5 and goods_name like &apos;诺基亚%&apos;; 1.15 一道面试题有如下表和数组把num值处于[20,29]之间,改为20num值处于[30,39]之间的,改为30 1.16 练习题把good表中商品名为’诺基亚xxxx’的商品,改为’HTCxxxx’,提示:大胆的把列看成变量,参与运算,甚至调用函数来处理 .substring(),concat() 2 分组查询group2.1 查出最贵的商品的价格select max(shop_price) from ecs_goods; 2.2 查出最大(最新)的商品编号select max(goods_id) from ecs_goods; 2.3 查出最便宜的商品的价格select min(shop_price) from ecs_goods; 2.4 查出最旧(最小)的商品编号select min(goods_id) from ecs_goods; 2.5 查询该店所有商品的库存总量select sum(goods_number) from ecs_goods; 2.6 查询所有商品的平均价select avg(shop_price) from ecs_goods; 2.7 查询该店一共有多少种商品select count(*) from ecs_goods; 2.8 查询每个栏目下面最贵商品价格最低商品价格商品平均价格商品库存量商品种类提示:(5个聚合函数,sum,avg,max,min,count与group综合运用) select cat_id,max(shop_price) from ecs_goods group by cat_id; 3 having与group综合运用查询3.1 查询该店的商品比市场价所节省的价格select goods_id,goods_name,market_price-shop_price as j from ecs_goods ; 3.2 查询每个商品所积压的货款(提示:库存*单价)select goods_id,goods_name,goods_number*shop_price from ecs_goods 3.3 查询该店积压的总货款select sum(goods_number*shop_price) from ecs_goods; 3.4 查询该店每个栏目下面积压的货款select cat_id,sum(goods_number*shop_price) as k from ecs_goods group by cat_id; 3.5 查询比市场价省钱200元以上的商品及该商品所省的钱(where和having分别实现)select goods_id,goods_name,market_price-shop_price as k from ecs_goods where market_price-shop_price &gt;200; select goods_id,goods_name,market_price-shop_price as k from ecs_goods having k &gt;200; 3.6 查询积压货款超过2W元的栏目,以及该栏目积压的货款select cat_id,sum(goods_number*shop_price) as k from ecs_goods group by cat_id having k&gt;20000 3.7 where-having-group综合练习题要求：查询出2门及2门以上不及格者的平均成绩 4 order by与limit查询4.1 按价格由高到低排序select goods_id,goods_name,shop_price from ecs_goods order by shop_price desc; 4.2 按发布时间由早到晚排序select goods_id,goods_name,add_time from ecs_goods order by add_time; 4.3 接栏目由低到高排序,栏目内部按价格由高到低排序select goods_id,cat_id,goods_name,shop_price from ecs_goods order by cat_id ,shop_price desc; 4.4 取出价格最高的前三名商品select goods_id,goods_name,shop_price from ecs_goods order by shop_price desc limit 3; 4.5 取出点击量前三名到前5名的商品select goods_id,goods_name,click_count from ecs_goods order by click_count desc limit 2,3; 5 连接查询5.1 取出所有商品的商品名,栏目名,价格select goods_name,cat_name,shop_price from ecs_goods left join ecs_category on ecs_goods.cat_id=ecs_category.cat_id; 5.2 取出第4个栏目下的商品的商品名,栏目名,价格select goods_name,cat_name,shop_price from ecs_goods left join ecs_category on ecs_goods.cat_id=ecs_category.cat_id where ecs_goods.cat_id = 4; 5.3 取出第4个栏目下的商品的商品名,栏目名,与品牌名select goods_name,cat_name,brand_name from ecs_goods left join ecs_category on ecs_goods.cat_id=ecs_category.cat_id left join ecs_brand on ecs_goods.brand_id=ecs_brand.brand_id where ecs_goods.cat_id = 4; 5.4 用友面试题根据给出的表结构按要求写出SQL语句。 6 union查询6.1 把ecs_comment,ecs_feedback两个表中的数据,各取出4列,并把结果集union成一个结果集 7 子查询7.1 查询出最新一行商品(以商品编号最大为最新,用子查询实现)select goods_id,goods_name from ecs_goods where goods_id =(select max(goods_id) from ecs_goods); 7.2 查询出编号为19的商品的栏目名称(用左连接查询和子查询分别)7.3 用where型子查询把ecs_goods表中的每个栏目下面最新的商品取出来select goods_id,goods_name,cat_id from ecs_goods where goods_id in (select max(goods_id) from ecs_goods group by cat_id); 7.4 用from型子查询把ecs_goods表中的每个栏目下面最新的商品取出来select * from (select goods_id,cat_id,goods_name from ecs_goods order by goods_id desc) as t group by cat_id; 7.5 用exists型子查询,查出所有有商品的栏目select * from category where exists (select * from goods where goods.cat_id=category.cat_id); 创建触发器CREATE trigger tg2 after insert on ord for each row update goods set goods_number=goods_number-new.num where id=new.gid CREATE trigger tg3 after delete on ord for each row update goods set goods_number=good_number+old.num where id=old.gid CREATE trigger tg4 after update on ord for each row update goods set goods_number=goods_number+old.num-new.num where id=old.gid]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java制作日历表]]></title>
    <url>%2FSleepingCAT%2F2019%2F12%2F28%2FJava%E5%88%B6%E4%BD%9C%E6%97%A5%E5%8E%86%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[/*最终版，实现指定月份的日历表*/package javaceshi;import java.util.Scanner;public class java10 &#123; public static void main(String[] args) &#123; Scanner in=new Scanner(System.in); System.out.println(&quot;请输入年份：&quot;); int years=in.nextInt(); System.out.println(&quot;请输入月份：&quot;); int months=in.nextInt(); int sum=0; for(int i=1900;i&lt;years;i++) &#123; if(i%4==0&amp;&amp;i%100!=0||i%400==0) &#123; sum+=366; &#125;else &#123; sum+=365; &#125; &#125; for(int j=1;j&lt;months;j++) &#123; if(j==2) &#123; if(years%4==0&amp;&amp;years%100!=0||years%400==0) &#123; sum+=29; &#125;else &#123; sum+=28; &#125; &#125;else &#123; if(j==4||j==6||j==9||j==11) &#123; sum+=30; &#125;else&#123; sum+=31; &#125; &#125; &#125; sum+=1; int weekday=sum%7; System.out.println(&quot;日\t一\t二\t三\t四\t五\t六&quot;); for(int i=1;i&lt;=weekday;i++) &#123; System.out.print(&quot;\t&quot;); &#125; int a; if(months==2) &#123; if(years%4==0&amp;&amp;years%100!=0||years%400==0) &#123; a=29; &#125;else &#123; a=28; &#125; &#125;else &#123; if(months==4||months==6||months==9||months==11) &#123; a=30; &#125;else &#123; a=31; &#125; &#125; for(int i=1;i&lt;=a;i++) &#123; if(sum%7==6) &#123; System.out.print(i+&quot;\n&quot;); &#125;else &#123; System.out.print(i+&quot;\t&quot;); &#125; sum++; &#125; &#125;&#125;]]></content>
      <tags>
        <tag>Java学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pycharm第三方库安装失败解决方案]]></title>
    <url>%2FSleepingCAT%2F2019%2F10%2F13%2FPycharm%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[首先检查是否安装pip打开cmd，直接输入pip即可 出现Could not find a version that satisfies the requirement requests (from versions: )使用定制源进行安装： 官网地址: https://wxpython.org/Phoenix/snapshot-builds/wxPython在PyPI的项目页面: https://pypi.org/project/wxPython/#files阿里源：http://mirrors.aliyun.com/pypi/simple/ 科大源：http://pypi.mirrors.ustc.edu.cn/simple/ 清华源：http://mirrors.tuna.tsinghua.edu.cn/pypi/simple 官方源：https://pypi.python.org/ 解决方法：pip install 第三方库名 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com例如安装requests就写成：pip install requests -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP群聊服务端实现]]></title>
    <url>%2FSleepingCAT%2F2019%2F10%2F11%2FTCP%E7%BE%A4%E8%81%8A%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[在Shell中运行Python 连接server = socket.socket()重新配置server.bind((&apos;192.168.142.135&apos;,9999))设置ip和端口!ss -tan查看ip和端口（!ss -tanl）server.listen()开启监听，才算绑定了端口 学习用源码import socketimport threadingimport loggingimport datetimeFORMAT = &quot;%(asctime)s %(threadname)s %(thread)d %(message)s&quot;logging.basicConfig(format=FORMAT,level=logging.INFO)# TCP Serverclass ChatServer: def __init__(self,ip=&apos;127.0.0.1&apos;,port=9999): self.addr = (ip,port) self.sock = socket.socket() self.clients = &#123;&#125; self.event = threading.Event() def start(self): self.sock.bind(self.addr) self.sock.listen()#服务启动了 threading.Thread(target=self.accept,name=&apos;accept&apos;).start() def accept(self): while not self.event.is_set():#一个线程 s,raddr = self.sock.accept()#阻塞 f = s.makefile(mode=&apos;rw&apos;) #logging.info(raddr)对端地址可以不看 #logging.info(s,f) logging.info(s) logging.info(f) #logging.info(f.fileno())由于不支持，去除 self.clients[raddr] = f threading.Thread(target=self.recv,name=&apos;recv&apos;,args=(s,raddr)).start() #def recv(self,sock:socket.socket):#很多线程 def recv(self,f,addr):#很多线程 while not self.event.is_set(): try: #data = sock.recv(1024)#阻塞，bytes #data = f.read()#string data = f.readline()#string,换行符\n logging.info(data) except Exception as e: logging error(e) data = b&apos;quit&apos; if data == b&apos;quit&apos;: #self.clients.pop(sock.getpeername()) self.clients.pop(addr) sock.close() break msg = &quot;ack&#123;&#125;. &#123;&#125; &#123;&#125;&quot;.format( #sock.getpeername(), addr, #datetime.datetime.now(),strftime(&quot;%Y/%m/%d-%H:%M:%S&quot;), data.decode()).encode() datetime.datetime.now(),strftime(&quot;%Y/%m/%d-%H:%M:%S&quot;), data) # sock.send(&apos;ack &#123;&#125;&apos;.format(data.decode()).encode()) for s in self.clients.values(): # s.send(&apos;ack &#123;&#125;&apos;.format(data.decode()).encode()) #s.send(msg) f.write(msg) f.flush() def stop(self): for s in self.clients.values(): s.close() self.sock.close() self.event.set() def main(): cs = ChatServer() cs.start() while True: cmd = input(&quot;&gt;&gt;&gt;&quot;) if cmd.strip() == &apos;quit&apos;: cs.stop() threading.Event.wait(3) break logging.info(threading.enumerate()) if __name__ == &apos;__main__&apos;: main() 链接TCP群聊服务端实现TCP Sockets编程 PDF——带完整书签TCP/UDP Socket调试工具(SocketTool) v4.0绿色中文版 附使用方法]]></content>
      <categories>
        <category>TCP</category>
      </categories>
      <tags>
        <tag>TCP pycharm Socket 学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Windows上为python3.7布置pipenv虚拟环境]]></title>
    <url>%2FSleepingCAT%2F2019%2F10%2F03%2F%E5%9C%A8Windows%E4%B8%8A%E4%B8%BApython3.7%E5%B8%83%E7%BD%AEpipenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[1.确保已安装python3.72.确认环境变量存在path路径3.一定要以管理员的身份打开cmd,并进入到python安装路径下,默认路径类似于C:\Users\26393，在类似下面的路径中C:\Users\26393\Anaconda3\Lib\site-packages\pip找到 from pip._internal import main as _main # isort:skip # noqaif __name__ == &apos;__main__&apos;: sys.exit(_main()) 不要修改它，网上很多修改的方法，修改后都飘红。python3安装自带pip，如果pip版本太旧，需pip3 install --upgrade pip升级一下。 接下来就是Pipenv的安装了： pip install pipenv 接下来创建一个文件夹，并在cmd上进入该文件夹 创建python3环境 pipenv --three这里可能会出现UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xb6 in position 0: invalid start byte，直接重启你的电脑，再次回到新建的目录下。（或者你可以关掉那些以中文名字的正在运行的程序） 在上一步新建环境的目录下,运行此命令才有效 激活虚拟环境 pipenv shell 查看虚拟环境python解释器所在位置 pipenv --py 友情链接：什么是pip？Pycharm 使用 Pipenv 新建的虚拟环境windows/linux环境python3.7出现ssl或者tsl不可用的解决方法pip install xxxx报错（一大堆红色exception）【解决】pipenv 新款Python虚拟环境工具详解Pipenv一键搭建python虚拟环境的方法pip更新出现”Traceback(most recent call last)”使用pipenv install出现utf-8不能decode的问题]]></content>
      <tags>
        <tag>虚拟环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Github+Hexo布置Next（Pisces）主题]]></title>
    <url>%2FSleepingCAT%2F2019%2F09%2F29%2F%E5%9F%BA%E4%BA%8EGithub%2BHexo%E5%B8%83%E7%BD%AENext%EF%BC%88Pisces%EF%BC%89%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[拥有自己的Github账户安装 Hexo安装完git和node.js 之后，打开npm，最好在一个新的文件夹里面执行npm install -g hexo-cli执行hexo init &lt;folder&gt;，如hexo init it，就创建了一个名字为it的文件夹cd &lt;folder&gt;即cd it最后执行npm install生成的文件夹如下： . _config.yml站点配置 package.json应用程序的信息 scaffolds模板文件夹，文章等的模板，方便写作等。 node_modules这个不会生成，得等到安装插件后才会生成。 source中有_posts，存放稿子处；_drafts这个可能不会生成，存放草稿处。 themes存放主题处，比如里面有next文件夹，进入，会看到里面还有一个_config.yml，这是主题配置。 Hexo 官网 Hexo 主题 NexT 使用文档站点配置下面所有的安装命令都用npm执行 个人基本信息 # Site title: 站点名称 subtitle: 主页副标题 description: 个人描述 keywords: author: 作者名称 language: 语言 timezone: 修改默认的theme: landscape为theme: next deploy的设置 deploy:type: git repository: https://github.com/登录名/仓库名.git branch: master 如： deploy:type: git repository: https://github.com/SleepingCAT526/SleepingCAT.git branch: master 这个配置完成之后，就可以尝试上传到github上了。 hexo clean第一步hexo g第二步如果出现ERROR Deployer not found: github，请执行npm install hexo-deployer-git更多报错原因可参考：Hexo常见问题解决方案 hexo s这一步只是为了在本地浏览一下修改后的效果，默认地址：http://localhost:4000hexo d最后一步，托管到github上。如果你是第一次上传，此时根目录下会生成一个.deploy_git文件夹。切记，在第二次上传之前一定要手动将其删除，不然上传的还是上一次（即没修改前）的内容。 设置网站图标favicon将一张ico图标放到/themes/next/source/images目录下，按/images/图片名称.png（或jpg...）修改图片路径。 设置RSS切换到根目录下，执行npm install --save hexo-generator-feed 在主题目录下的_config.yml任意处添加： # Extensions# Plugins: http://hexo.io/plugins/ plugins: hexo-generate-feed 修改rss # Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already. rss: /atom.xml 四种主题（Schemes） 路径:themes/next/_config.yml增删#即可实现开关某个主题配置。 动态背景Canvas-nest three_waves canvas_lines canvas_sphere直接设置为true即可，如Canvas-nest: true 显示当前浏览进度# Scroll percent label in b2t button scrollpercent: true 设置[分类]和[标签] 如hexo new page categories，新建categoriers文件夹，修改里面的index.md为： ---title: categoriesdate: xxxx-xx-xx xx:xx:xxtype: &quot;categories&quot;--- hexo new page tags，新建tags文件夹，修改里面的index.md为： ---title: tagsdate: xxxx-xx-xx xx:xx:xxtype: &quot;tags&quot;--- 部分参数示例： 参数 含义 title 标题 date 文件建立日期 updated 文件更新日期 comments 开启评论功能 tags 标签 categories 分类 添加本地搜索菜单npm执行npm install hexo-generator-searchdb --save,安装插件 打开站点配置，在任意处添加： search:path: search.xmlfield: postformat: htmllimit: 10000 打开主题配置，搜索Local search，将 enable 设置为 true，启动本地搜索功能。 # Local search local_search: enable: true 添加文章字数统计、阅读时长执行npm install hexo-wordcount --save 打开主题配置，搜索post_wordcount，修改为： # Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcount post_wordcount:item_text: truewordcount: true # 单篇 字数统计min2read: true # 单篇 阅读时长totalcount: false # 网站 字数统计separated_meta: true 此时文章的字数统计和阅读时长后面没有对应的xxx字,xx分钟等字样,只有数字。 前往如下路径\themes\next\layout_macro\post.swig，修改： &lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt;&#123;&#123; wordcount(post.content) &#125;&#125; 字 &lt;/span&gt;... &lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt;&#123;&#123; min2read(post.content) &#125;&#125; 分钟 &lt;/span&gt; 才可以看到显示：阅读时长 ≈ 2 分钟，但若是不需要显示 ≈ ，就修改： &#123;% if theme.post_wordcount.item_text %&#125;&lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125; &amp;asymp;&lt;/span&gt; 把&amp;asymp;删除。 设置友情链接打开主题配置，示例： # Blog rolls links_icon: link links_title: Links links_layout: block #links_layout: inline links:NexT主题的优化定制修改指南: https://blog.csdn.net/u012195214/article/details/79204088 侧边栏友情链接及菜单等旁边的图标复制图标名字即可，图标库或Font Awesome格式如下： social:GitHub: https://github.com/SleepingCAT526 || github知乎: https://www.zhihu.com/signin?next=%2F || telegramE-Mail: mailto:2639374992@qq.com || envelopebilibili: https://www.bilibili.com || television#Google: https://plus.google.com/yourname || google#Twitter: https://twitter.com/yourname || twitter 移动端显示 back-to-top 按钮和侧栏打开主题配置，修改为： # Enable sidebar on narrow viewonmobile: true 详情参考：Hexo | NexT打造一个炫酷博客 修改文章底部#号标签,改为图标进入路径/themes/next/layout/_macro/post.swig，搜索rel=&quot;tag&quot;&gt;#，将#换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 侧边栏头像切记，这里你要自己把图片截图成正方形的，不然结果是椭圆的，这与微信等老是要截图成正方形是一样的道理。 头像设置圆形,停留旋转效果 进入路径themes\next\source\css\_common\components\sidebar\sidebar-author.styl，将原始的.site-author-image这一段的内容修改为： .site-author-image &#123; display: circle; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width = 100px; height: $site-author-image-height = 100px; border: $site-author-image-border-width solid $site-author-image-border-color; border-radius: 100%; transition: 1s all; cursor: pointer; &#125; .site-author-image:hover &#123;transform: rotate(360deg); &#125; 侧边栏头像的链接当把鼠标移到侧边栏里的头像上时，鼠标样式变为pointer，点击头像将把页面转向指定链接。 1.修改鼠标样式在themes/next/layout/source/css/_common/componets/sidebar文件夹下打开sidebar-author.styl文件，在.site-author-image{}内添加cursor: pointer;如： .site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; cursor: pointer;&#125; 2.添加链接在themes/next/layout/source/js/src文件夹下打开motion.js文件，在顶部其中添加代码： $(&apos;.site-author-image&apos;).click(function()&#123;window.location.href=&quot;自定义链接&quot;; &#125;); 文章 文章末尾添加”本文结束”标记修改在themes/next/layout/_macro/post.swig中，在wechat-subscriber.swig之前添加如下代码： + &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;---------------- The End ----------------&lt;/div&gt;&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125;&lt;div&gt; &#123;% include &apos;wechat-subscriber.swig&apos; %&#125;&lt;/div&gt;&#123;% endif %&#125; 文章末尾追加版权信息,增加版权有两种方式 1.修改主题配置文件,搜索post_copyright post_copyright: - enable: false + enable: truelicense: CC BY-NC-SA 3.0license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 2.如果觉得默认不好看,则可以自定义样式,找到themes/next/layout/_macro/post.swig，在footer之前添加如下代码(添加之前确保已添加样式)： &lt;div&gt;&lt;p id=&quot;div-border-left-red&quot;&gt; &lt;b&gt;本文基于&lt;a target=&quot;_blank&quot; title=&quot;Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)&quot; href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt; 知识共享署名-相同方式共享 4.0 &lt;/a&gt;国际许可协议发布&lt;/b&gt;&lt;br/&gt; &lt;span&gt; &lt;b&gt;本文地址：&lt;/b&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;&lt;br/&gt;&lt;b&gt;转载请注明出处，谢谢！&lt;/b&gt; &lt;/span&gt;&lt;/p&gt; &lt;/div&gt; 设置文章加密访问 打开themes/next/layout/_partials/head.swig文件，在``之前插入代码： &lt;script&gt;(function()&#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; if (prompt(&apos;请输入密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; alert(&apos;密码错误&apos;); history.back(); &#125; &#125;&#125;)(); &lt;/script&gt; 然后写文章时加上password 网页加载进度条编辑主题配置文件搜索pace，将其值改为ture就可以了，选择一款你喜欢的样式。 如何在README.md文件中添加图片在标题里的链接的关于添加图片的方法，经过测试，比较有效的方法不是直接copy浏览器里的链接地址，而是在图片那里右键，选择复制图片链接，这两个的链接是不一样的。 更换博客背景图打开\themes\next\source\css\_custom\文件夹下的custom.styl文件，添加如下代码： //背景图 body &#123; background-image: url(/images/background.jpg);background-attachment: fixed; // 不随屏幕滚动而滚动fixed,scroll,inheritbackground-repeat: no-repeat; // 如果背景图不够屏幕大小则重复铺，改为no-repeat则表示不重复铺background-size: cover; // contain等比例铺满屏幕 //cover拉伸铺满background-position: bottom;//x,y轴调整+mobile()&#123; //background-position: 0% -20%;https://i.loli.net/2018/12/29/5c270a0523154.jpg //https://i.loli.net/2018/12/29/5c270fc2bfcad.png background-image: url(https://ziyuan.lruihao.cn/images/bg_cell.png); background-size: cover;&#125; &#125; 音乐播放器 APlayer执行npm install aplayer --save参考链接：1.APlayer-Controler2.hexo上的aplayer应用3.APlayer官方4.hexo-tag-aplayer5.Hexo 使用 APlayer 播放音乐6.MetingJS 网易云音乐mp3外链、真实地址下载方法一个网易音乐外链地址长期有效，很简单的方法： 第一步打开网易云音乐，随便找到一首歌，播放，复制网址的ID，例如：杨钰莹的心雨，网址是：http://music.163.com/#/song?id=317151 很明显，ID是317151那么，这首歌的真实地址就是：http://music.163.com/song/media/outer/url?id=317151.mp3 这个地址不会失效的；这就得到一个下载公式：http://music.163.com/song/media/outer/url?id=ID数字.mp3把上面红色部分ID数字换成网易云播放页面的id即可。 视频播放Hexo 播放器插件 hexo-tag-dplayer 该如何使用？ 友情链接：NexT主题的优化定制修改指南html5模板Hexo-NexT搭建个人博客（五）hexo的next主题个性化配置教程hexo的next主题个性化配置Hexo next博客添加折叠块功能添加折叠代码块【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析Markdown 教程]]></content>
      <tags>
        <tag>github,hexo,next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACCESS中筛选并保留指定日期的整点半点]]></title>
    <url>%2FSleepingCAT%2F2019%2F09%2F18%2FACCESS%E4%B8%AD%E7%AD%9B%E9%80%89%E5%B9%B6%E4%BF%9D%E7%95%99%E6%8C%87%E5%AE%9A%E6%97%A5%E6%9C%9F%E7%9A%84%E6%95%B4%E7%82%B9%E5%8D%8A%E7%82%B9%2F</url>
    <content type="text"><![CDATA[基于365版本的OFFICE实验。首先说明下，用于实验的ACCESS文件只支持删除操作，不能通过复制粘贴来更新数据。打开ACCESS文件之后，点击所有访问对象，选择浏览类别中的表和相关视图，目的是为了后面创建查询向导或查询设计的时候能主动将原表和查询表放在一起免得到处去找，也有利于提升用户体验。首先，双击你想筛选的表，后在创建界面创建查询向导或查询设计，选择简单查询设计即可，确定，在可用字段下面点击你想筛选的列名，点击&gt;右移到选定字段，点击下一步，选择修改查询设计，点击完成。在写着表名查询那里右键，打开SQL视图模式，也可以在屏幕的右下方找到数据表视图，SQL视图，设计视图三种模式的切换按钮。下面是个人的思路，首先，根据学习过的SQL数据库知识，写了两条代码在ACCESS中进行筛选非整点半点的数据，一直报错….后面查了资料才发现，ACCESS中的SQL查询只能存在一条SQL语句！ 接下来根据 SELECT 表名.[列名] FROM 表名 WHERE 表名.[列名]=#指定日期# IN 一段时间 写了一段代码，代码如下： SELECT Record.[DT] FROM Record WHERE Record.[DT]=#2019/9/8# IN ((Record.[DT] NOT LIKE &quot;2019/9/8 ??:00:0？&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:00:0？&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:00:0？&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:00:0？&quot;)) ————由于?:00:0？中零几秒的数据也要保留，不用保留零几秒的可以自行将所有的0？改为00。 然后Ctrl+S保存，双击查询表，发现不是自己想要的，筛选出来的全是整点半点的数据。。。。————思路是：删除非整点半点的时间段，从而只保留整点半点的数据然后想着将NOT LIKE中的NOT删除又会怎样呢？结果发现，筛选语句完全没有用，跟没筛选前一模一样。。。。 纠结着，突然灵光一闪，既然NOT LIKE筛选出的是LIKE的数据，那我能不能根据NOT LIKE非整点半点的时间段来得到“非整点半点的时间段”，然后删除非整点半点的时间段，从而只保留整点半点的数据呢? 下面前面加打勾的是要保留的，加叉是要删除掉的。 ✔ 2019/9/8 ??:00:0? 2019/9/8 ?:00:0? ✔ 2019/9/8 ??:30:0? 2019/9/8 ?:30:0? ✘ 2019/9/8 ??:01:??~2019/9/8 ??:09:?? ✘ 2019/9/8 ??:00:1?~2019/9/8 ??:00:5? ✘ 2019/9/8 ??:1?:??~2019/9/8 ??:5?:??(2019/9/8 ??:3?:??除外) ✘ 2019/9/8 ??:31:??~2019/9/8 ??:39:?? ✘ 2019/9/8 ??:30:1?~2019/9/8 ??:30:5? ✘ 2019/9/8 ?:01:??2019/9/8 ?:09:?? ✘ 2019/9/8 ?:00:1?2019/9/8 ?:00:5? ✘ 2019/9/8 ?:1?:??2019/9/8 ?:5?:??(2019/9/8 ?:3?:??除外) ✘ 2019/9/8 ?:31:??2019/9/8 ?:39:?? ✘ 2019/9/8 ?:30:1?~2019/9/8 ?:30:5? 代码如下： SELECT Record.[DT] FROM Record WHERE Record.[DT]=#2019/9/8# IN (((Record.[DT] NOT LIKE &quot;2019/9/8 ??:01:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:02:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:03:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:04:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:05:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:06:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:07:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:08:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:09:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:00:1?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:00:2?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:00:3?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:00:4?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:00:5?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:1?:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:2?:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:4?:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:5?:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:31:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:32:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:33:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:34:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:35:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:36:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:37:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:38:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:39:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:30:1?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:30:2?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:30:3?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:30:4?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ??:30:5?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:01:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:02:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:03:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:04:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:05:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:06:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:07:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:08:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:09:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:00:1?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:00:2?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:00:3?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:00:4?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:00:5?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:1?:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:2?:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:4?:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:5?:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:31:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:32:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:33:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:34:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:35:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:36:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:37:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:38:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:39:??&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:30:1?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:30:2?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:30:3?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:30:4?&quot;) AND (Record.[DT] NOT LIKE &quot;2019/9/8 ?:30:5?&quot;)) ORDER BY Record.[DT] ASC)想要更换日期的话，可以将其保存到.TXT文件中，利用TXT文件的替换功能即可轻松快捷完成指定日期的替换。 但如果日期格式为2019/9/8的话，即凌晨的2019/9/8 00：00：00显示为2019/9/8的话，此公式不适用，可以通过升序当天日期自行解决多出的这一部分时间点（代码已升序）。]]></content>
      <tags>
        <tag>ACCESS</tag>
      </tags>
  </entry>
</search>
